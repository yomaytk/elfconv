diff --git a/coreutils/uname.c b/coreutils/uname.c
index 6c0bdf096..b935c8858 100644
--- a/coreutils/uname.c
+++ b/coreutils/uname.c
@@ -209,5 +209,6 @@ int uname_main(int argc UNUSED_PARAM, char **argv UNUSED_PARAM)
 #endif
 	}
 
-	fflush_stdout_and_exit_SUCCESS(); /* coreutils-6.9 compat */
+	// fflush_stdout_and_exit_SUCCESS(); /* coreutils-6.9 compat */
+  return 0;
 }
diff --git a/include/libbb.h b/include/libbb.h
index cca33a177..f848fd542 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -1269,9 +1269,9 @@ int run_nofork_applet(int applet_no, char **argv) FAST_FUNC;
 void run_noexec_applet_and_exit(int a, const char *name, char **argv) NORETURN FAST_FUNC;
 #ifndef BUILD_INDIVIDUAL
 int find_applet_by_name(const char *name) FAST_FUNC;
-void run_applet_no_and_exit(int a, const char *name, char **argv) NORETURN FAST_FUNC;
+int run_applet_no_and_exit(int a, const char *name, char **argv) FAST_FUNC;
 #endif
-void show_usage_if_dash_dash_help(int applet_no, char **argv) FAST_FUNC;
+int show_usage_if_dash_dash_help(int applet_no, char **argv) FAST_FUNC;
 #if defined(__linux__)
 int re_execed_comm(void) FAST_FUNC;
 void set_task_comm(const char *comm) FAST_FUNC;
@@ -1423,7 +1423,7 @@ extern smallint logmode;
 extern uint8_t xfunc_error_retval;
 extern void (*die_func)(void);
 void xfunc_die(void) NORETURN FAST_FUNC;
-void bb_show_usage(void) NORETURN FAST_FUNC;
+void bb_show_usage(void);
 void bb_error_msg(const char *s, ...) __attribute__ ((format (printf, 1, 2))) FAST_FUNC;
 void bb_simple_error_msg(const char *s) FAST_FUNC;
 void bb_error_msg_and_die(const char *s, ...) __attribute__ ((noreturn, format (printf, 1, 2))) FAST_FUNC;
diff --git a/libbb/appletlib.c b/libbb/appletlib.c
index d5335d353..51e878172 100644
--- a/libbb/appletlib.c
+++ b/libbb/appletlib.c
@@ -124,7 +124,7 @@ static const char packed_usage[] ALIGN1 = { PACKED_USAGE };
 #endif /* FEATURE_COMPRESS_USAGE */
 
 
-void FAST_FUNC bb_show_usage(void)
+void bb_show_usage(void)
 {
 	if (ENABLE_SHOW_USAGE) {
 #ifdef SINGLE_APPLET_STR
@@ -171,7 +171,8 @@ void FAST_FUNC bb_show_usage(void)
 			dealloc_usage_messages((char*)usage_string);
 #endif
 	}
-	xfunc_die();
+	// xfunc_die();
+  return;
 }
 
 int FAST_FUNC find_applet_by_name(const char *name)
@@ -701,7 +702,7 @@ static void install_links(const char *busybox UNUSED_PARAM,
 # endif
 
 # if ENABLE_BUSYBOX || NUM_APPLETS > 0
-static void run_applet_and_exit(const char *name, char **argv) NORETURN;
+static void run_applet_and_exit(const char *name, char **argv);
 #endif
 
 # if NUM_SCRIPTS > 0
@@ -749,6 +750,291 @@ get_script_content(unsigned n)
 }
 # endif /* NUM_SCRIPTS > 0 */
 
+/***************************************************************************//**
+
+  @file         main.c
+
+  @author       Stephen Brennan
+
+  @date         Thursday,  8 January 2015
+
+  @brief        LSH (Libstephen SHell)
+
+*******************************************************************************/
+
+#include <sys/wait.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+
+/*
+  Function Declarations for builtin shell commands:
+ */
+int lsh_cd(char **args);
+int lsh_help(char **args);
+int lsh_exit(char **args);
+
+/*
+  List of builtin commands, followed by their corresponding functions.
+ */
+char *builtin_str[] = {
+  "cd",
+  "help",
+  "exit"
+};
+
+int (*builtin_func[]) (char **) = {
+  &lsh_cd,
+  &lsh_help,
+  &lsh_exit
+};
+
+int lsh_num_builtins() {
+  return sizeof(builtin_str) / sizeof(char *);
+}
+
+/*
+  Builtin function implementations.
+*/
+
+/**
+   @brief Builtin command: change directory.
+   @param args List of args.  args[0] is "cd".  args[1] is the directory.
+   @return Always returns 1, to continue executing.
+ */
+int lsh_cd(char **args)
+{
+  if (args[1] == NULL) {
+    fprintf(stderr, "lsh: expected argument to \"cd\"\n");
+  } else {
+    if (chdir(args[1]) != 0) {
+      perror("lsh");
+    }
+  }
+  return 0;
+}
+
+/**
+   @brief Builtin command: print help.
+   @param args List of args.  Not examined.
+   @return Always returns 1, to continue executing.
+ */
+int lsh_help(char **args)
+{
+  int i;
+  printf("Stephen Brennan's LSH\n");
+  printf("Type program names and arguments, and hit enter.\n");
+  printf("The following are built in:\n");
+
+  for (i = 0; i < lsh_num_builtins(); i++) {
+    printf("  %s\n", builtin_str[i]);
+  }
+
+  printf("Use the man command for information on other programs.\n");
+  return 0;
+}
+
+/**
+   @brief Builtin command: exit.
+   @param args List of args.  Not examined.
+   @return Always returns 0, to terminate execution.
+ */
+int lsh_exit(char **args)
+{
+  return 1;
+}
+
+// /**
+//   @brief Launch a program and wait for it to terminate.
+//   @param args Null terminated list of arguments (including program).
+//   @return Always returns 1, to continue execution.
+//  */
+// int lsh_launch(char **args)
+// {
+//   pid_t pid;
+//   int status;
+
+//   pid = fork();
+//   if (pid == 0) {
+//     // Child process
+//     if (execvp(args[0], args) == -1) {
+//       perror("lsh");
+//     }
+//     exit(EXIT_FAILURE);
+//   } else if (pid < 0) {
+//     // Error forking
+//     perror("lsh");
+//   } else {
+//     // Parent process
+//     do {
+//       waitpid(pid, &status, WUNTRACED);
+//     } while (!WIFEXITED(status) && !WIFSIGNALED(status));
+//   }
+
+//   return 1;
+// }
+
+// /**
+//    @brief Execute shell built-in or launch program.
+//    @param args Null terminated list of arguments.
+//    @return 1 if the shell should continue running, 0 if it should terminate
+//  */
+// int lsh_execute(char **args)
+// {
+//   int i;
+
+//   if (args[0] == NULL) {
+//     // An empty command was entered.
+//     return 1;
+//   }
+
+//   for (i = 0; i < lsh_num_builtins(); i++) {
+//     if (strcmp(args[0], builtin_str[i]) == 0) {
+//       return (*builtin_func[i])(args);
+//     }
+//   }
+
+//   return lsh_launch(args);
+// }
+
+/**
+   @brief Read a line of input from stdin.
+   @return The line from stdin.
+ */
+char *lsh_read_line(void)
+{
+#ifdef LSH_USE_STD_GETLINE
+  char *line = NULL;
+  ssize_t bufsize = 0; // have getline allocate a buffer for us
+  if (getline(&line, &bufsize, stdin) == -1) {
+    if (feof(stdin)) {
+      exit(EXIT_SUCCESS);  // We received an EOF
+    } else  {
+      perror("lsh: getline\n");
+      exit(EXIT_FAILURE);
+    }
+  }
+  return line;
+#else
+#define LSH_RL_BUFSIZE 1024
+  int bufsize = LSH_RL_BUFSIZE;
+  int position = 0;
+  char *buffer = malloc(sizeof(char) * bufsize);
+  int c;
+
+  if (!buffer) {
+    fprintf(stderr, "lsh: allocation error\n");
+    exit(EXIT_FAILURE);
+  }
+
+  while (1) {
+    // Read a character
+    c = getchar();
+
+    if (c == EOF) {
+      exit(EXIT_SUCCESS);
+    } else if (c == '\n') {
+      buffer[position] = '\0';
+      return buffer;
+    } else {
+      buffer[position] = c;
+    }
+    position++;
+
+    // If we have exceeded the buffer, reallocate.
+    if (position >= bufsize) {
+      bufsize += LSH_RL_BUFSIZE;
+      buffer = realloc(buffer, bufsize);
+      if (!buffer) {
+        fprintf(stderr, "lsh: allocation error\n");
+        exit(EXIT_FAILURE);
+      }
+    }
+  }
+#endif
+}
+
+#define LSH_TOK_BUFSIZE 64
+#define LSH_TOK_DELIM " \t\r\n\a"
+/**
+   @brief Split a line into tokens (very naively).
+   @param line The line.
+   @return Null-terminated array of tokens.
+ */
+char **lsh_split_line(char *line)
+{
+  int bufsize = LSH_TOK_BUFSIZE, position = 0;
+  char **tokens = malloc(bufsize * sizeof(char*));
+  char *token, **tokens_backup;
+
+  if (!tokens) {
+    fprintf(stderr, "lsh: allocation error\n");
+    exit(EXIT_FAILURE);
+  }
+
+  token = strtok(line, LSH_TOK_DELIM);
+  while (token != NULL) {
+    tokens[position] = token;
+    position++;
+
+    if (position >= bufsize) {
+      bufsize += LSH_TOK_BUFSIZE;
+      tokens_backup = tokens;
+      tokens = realloc(tokens, bufsize * sizeof(char*));
+      if (!tokens) {
+		free(tokens_backup);
+        fprintf(stderr, "lsh: allocation error\n");
+        exit(EXIT_FAILURE);
+      }
+    }
+
+    token = strtok(NULL, LSH_TOK_DELIM);
+  }
+  tokens[position] = NULL;
+  return tokens;
+}
+
+// /**
+//    @brief Loop getting input and executing it.
+//  */
+// void lsh_loop(void)
+// {
+//   char *line;
+//   char **args;
+//   int status;
+
+//   do {
+//     printf("> ");
+//     line = lsh_read_line();
+//     args = lsh_split_line(line);
+//     status = lsh_execute(args);
+
+//     free(line);
+//     free(args);
+//   } while (status);
+// }
+
+// /**
+//    @brief Main entry point.
+//    @param argc Argument count.
+//    @param argv Argument vector.
+//    @return status code
+//  */
+// int main(int argc, char **argv)
+// {
+//   // Load config files, if any.
+
+//   // Run command loop.
+//   lsh_loop();
+
+//   // Perform any shutdown/cleanup.
+
+//   return EXIT_SUCCESS;
+// }
+
+
 # if ENABLE_BUSYBOX
 #  if ENABLE_FEATURE_SH_STANDALONE && ENABLE_FEATURE_TAB_COMPLETION
     /*
@@ -918,7 +1204,7 @@ int busybox_main(int argc UNUSED_PARAM, char **argv)
 # endif
 
 # if NUM_APPLETS > 0
-void FAST_FUNC show_usage_if_dash_dash_help(int applet_no, char **argv)
+int FAST_FUNC show_usage_if_dash_dash_help(int applet_no, char **argv)
 {
 	/* Special case. POSIX says "test --help"
 	 * should be no different from e.g. "test --foo".
@@ -946,11 +1232,13 @@ void FAST_FUNC show_usage_if_dash_dash_help(int applet_no, char **argv)
 			/* Make "foo --help [...]" exit with 0: */
 			xfunc_error_retval = 0;
 			bb_show_usage();
+      return 1;
 		}
 	}
+  return 0;
 }
 
-void FAST_FUNC run_applet_no_and_exit(int applet_no, const char *name, char **argv)
+int FAST_FUNC run_applet_no_and_exit(int applet_no, const char *name, char **argv)
 {
 	int argc;
 
@@ -960,32 +1248,37 @@ void FAST_FUNC run_applet_no_and_exit(int applet_no, const char *name, char **ar
 	 */
 	applet_name = name;
 
-	show_usage_if_dash_dash_help(applet_no, argv);
-
+  int help_res = show_usage_if_dash_dash_help(applet_no, argv);
+	if (help_res) {
+    return 0;
+  }
+  
 	if (ENABLE_FEATURE_SUID)
 		check_suid(applet_no);
 
 	argc = string_array_len(argv);
 	xfunc_error_retval = applet_main[applet_no](argc, argv);
-
 	/* Note: applet_main() may also not return (die on a xfunc or such) */
-	xfunc_die();
+	// xfunc_die();
 }
 # endif /* NUM_APPLETS > 0 */
 
 # if ENABLE_BUSYBOX || NUM_APPLETS > 0
-static NORETURN void run_applet_and_exit(const char *name, char **argv)
+static void run_applet_and_exit(const char *name, char **argv)
 {
-#  if ENABLE_BUSYBOX
-	if (is_prefixed_with(name, "busybox"))
-		exit(busybox_main(/*unused:*/ 0, argv));
+#  if ENABLE_BUSYBOX && false
+	if (is_prefixed_with(name, "busybox")) {
+		busybox_main(/*unused:*/ 0, argv);
+  }
 #  endif
 #  if NUM_APPLETS > 0
 	/* find_applet_by_name() search is more expensive, so goes second */
 	{
 		int applet = find_applet_by_name(name);
-		if (applet >= 0)
+		if (applet >= 0) {
 			run_applet_no_and_exit(applet, name, argv);
+      return;
+    }
 	}
 #  endif
 
@@ -993,7 +1286,7 @@ static NORETURN void run_applet_and_exit(const char *name, char **argv)
 	full_write2_str(applet_name);
 	full_write2_str(": applet not found\n");
 	/* POSIX: "If a command is not found, the exit status shall be 127" */
-	exit(127);
+	return 0;
 }
 # endif
 
@@ -1032,6 +1325,32 @@ int lbb_main(char **argv)
 int main(int argc UNUSED_PARAM, char **argv)
 #endif
 {
+  char *line;
+  char **cmds;
+  int cmdc;
+  int lsh_status;
+
+  for(;;) {
+    lsh_status = 0;
+
+    printf("> ");
+    fflush(stdout);
+
+    line = lsh_read_line();
+    cmds = lsh_split_line(line);
+    cmdc = 0;
+    
+    for (size_t i = 0;cmds[i];i++) {
+      cmdc++;
+    }
+
+    for (int i = 0; i < lsh_num_builtins(); i++) {
+      if (strcmp(cmds[0], builtin_str[i]) == 0) {
+         lsh_status = (*builtin_func[i])(cmds);
+         goto cmdend;
+      }
+    }
+
 #if 0
 	/* TODO: find a use for a block of memory between end of .bss
 	 * and end of page. For example, I'm getting "_end:0x812e698 2408 bytes"
@@ -1070,41 +1389,41 @@ int main(int argc UNUSED_PARAM, char **argv)
 
 #if !BB_MMU
 	/* NOMMU re-exec trick sets high-order bit in first byte of name */
-	if (argv[0][0] & 0x80) {
+	if (cmds[0][0] & 0x80) {
 		re_execed = 1;
-		argv[0][0] &= 0x7f;
+		cmds[0][0] &= 0x7f;
 	}
 #endif
 
 #if defined(SINGLE_APPLET_MAIN)
 
 	/* Only one applet is selected in .config */
-	if (argv[1] && is_prefixed_with(argv[0], "busybox")) {
+	if (cmds[1] && is_prefixed_with(cmds[0], "busybox")) {
 		/* "busybox <applet> <params>" should still work as expected */
-		argv++;
+		cmds++;
 	}
 	/* applet_names in this case is just "applet\0\0" */
-	lbb_prepare(applet_names IF_FEATURE_INDIVIDUAL(, argv));
+	lbb_prepare(applet_names IF_FEATURE_INDIVIDUAL(, cmds));
 # if ENABLE_BUILD_LIBBUSYBOX
-	return SINGLE_APPLET_MAIN(string_array_len(argv), argv);
+	return SINGLE_APPLET_MAIN(string_array_len(cmds), cmds);
 # else
-	return SINGLE_APPLET_MAIN(argc, argv);
+	return SINGLE_APPLET_MAIN(cmdc, cmds);
 # endif
 
 #elif !ENABLE_BUSYBOX && NUM_APPLETS == 0
 
-	full_write2_str(bb_basename(argv[0]));
+	full_write2_str(bb_basename(cmds[0]));
 	full_write2_str(": no applets enabled\n");
 	return 127;
 
 #else
 
-	lbb_prepare("busybox" IF_FEATURE_INDIVIDUAL(, argv));
+	lbb_prepare("busybox" IF_FEATURE_INDIVIDUAL(, cmds));
 # if !ENABLE_BUSYBOX
-	if (argv[1] && is_prefixed_with(bb_basename(argv[0]), "busybox"))
-		argv++;
+	if (cmds[1] && is_prefixed_with(bb_basename(cmds[0]), "busybox"))
+		cmds++;
 # endif
-	applet_name = argv[0];
+	applet_name = cmds[0];
 	if (applet_name[0] == '-')
 		applet_name++;
 	applet_name = bb_basename(applet_name);
@@ -1125,7 +1444,15 @@ int main(int argc UNUSED_PARAM, char **argv)
 	}
 
 	parse_config_file(); /* ...maybe, if FEATURE_SUID_CONFIG */
-	run_applet_and_exit(applet_name, argv);
-
+	
+  run_applet_and_exit(applet_name, cmds);
+
+cmdend:
+    free(line);
+    free(cmds);
+    if (lsh_status) {
+      break;
+    }
+  }
 #endif
 }
diff --git a/libbb/fflush_stdout_and_exit.c b/libbb/fflush_stdout_and_exit.c
index 33e28ae34..7a554a5d1 100644
--- a/libbb/fflush_stdout_and_exit.c
+++ b/libbb/fflush_stdout_and_exit.c
@@ -18,7 +18,7 @@ void FAST_FUNC fflush_stdout_and_exit(int retval)
 	xfunc_error_retval = retval;
 	/* In case we are in NOFORK applet. Do not exit() directly,
 	 * but use xfunc_die() */
-	xfunc_die();
+	// xfunc_die();
 }
 
 void FAST_FUNC fflush_stdout_and_exit_SUCCESS(void)
diff --git a/libbb/xfunc_die.c b/libbb/xfunc_die.c
index 25b99066d..2aa529722 100644
--- a/libbb/xfunc_die.c
+++ b/libbb/xfunc_die.c
@@ -17,5 +17,5 @@ void FAST_FUNC xfunc_die(void)
 {
 	if (die_func)
 		die_func();
-	exit(xfunc_error_retval);
+	// exit(xfunc_error_retval);
 }
